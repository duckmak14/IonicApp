@model OilPriceViewModel
@{
    Layout = "~/Areas/Admin/Views/Shared/_LayoutEmpty.cshtml";
}
@using (Html.BeginForm("Add", "ManageOilPrice", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-change-car" }))
{
<div>
    <div class="flex">
        <div class="width-text-modal">
            @Html.LabelFor(m => m.StartDate, new { @class = "control-label" })
            <span class="form-obligatory">*</span>
        </div>
        <div class="controls">
            @(Html.Kendo().DatePicker()
                    .Name("datestart") // The name of the DatePicker is mandatory. It specifies the "id" attribute of the widget.
                    .Min(new DateTime(1900, 1, 1)) // Sets the min date of the DatePicker.
                    .Max(new DateTime(2099, 12, 31)) // Sets the max date of the DatePicker.
                    .HtmlAttributes(new { type = "text" })
                    .Culture("vi-VN")
    )
            <br />
            @Html.ValidationMessageFor(m => m.StartDate)

        </div>
    </div>
    <div class="flex">
        <div class="width-text-modal">
            @Html.LabelFor(m => m.EndDate, new { @class = "control-label" })
            <span class="form-obligatory">*</span>
        </div>
        <div class="controls">
            @(Html.Kendo().DatePicker()
                    .Name("date") // The name of the DatePicker is mandatory. It specifies the "id" attribute of the widget.
                    .Min(new DateTime(1900, 1, 1)) // Sets the min date of the DatePicker.
                    .Max(new DateTime(2099, 12, 31)) // Sets the max date of the DatePicker.
                    .HtmlAttributes(new { type = "text" })
                    .Culture("vi-VN")
    )
            <br />
            @Html.ValidationMessageFor(m => m.EndDate)
            @Html.ValidationMessage("CustomError", new { @class = "field-validation-timer custom-error" })

        </div>
    </div>

    <div class="flex">
        <div class="width-text-modal">
            @Html.Label("Giá dầu", new { @class = "control-label" })
            <span class="form-obligatory">*</span>

        </div>
        <div class="controls">
            @Html.TextBoxFor(m => m.OilPrice, new { type = "text", name = "BKS", @class = "input-block-level" })
            @Html.ValidationMessageFor(m => m.OilPrice)
            @Html.ValidationSummary(true)
        </div>
    </div>
    <div class="row top-rows">
        <div class="col-lg-4 col-md-4 col-sm-4 col-4" onclick="exitWindow()">
            <div class="exit-car-form">Hủy</div>
        </div>
        <div class="col-lg-8 col-md-8 col-sm-8 col-8">
            <div>
                <input type="submit" class="btn text-14-700 save-change-car-form" value="Lưu">
            </div>
        </div>
    </div>
</div>
    @Html.AntiForgeryToken()
}

<script type="text/javascript">
       
        //if (screen.width > 1500) {
        //    top.winsetup("Thêm kế hoạch", 1440 * 0.4, screen.height * 0.47, true);
        //}
        //else if (screen.width < 450) {
        //    top.winsetup("Thêm kế hoạch", screen.width * 0.8, screen.height * 0.55, true);
        //}
        //else if (screen.width < 1025) {
        //    top.winsetup("Thêm kế hoạch", screen.width * 0.6, screen.height * 0.4, true);
        //}
        //else {
        //    top.winsetup("Thêm kế hoạch", screen.width * 0.4, screen.height * 0.62, true);
        //}
    top.winsetup("Thêm giá dầu", 600, 290, true);
    if (screen.width < 576) {
        top.winsetup("Thêm giá dầu", screen.width * 0.8, screen.height * 0.52, true);
    }
    function create_success() {
        top.winclose();
        top.$("#grid").data("kendoGrid").dataSource.read();
        window.parent.show_stack_bottom_right('success', 'Thêm giá dầu', 'Thêm thành công.');

    }
    function exitWindow() {
        top.$("#window").data("kendoWindow").close();
    }
    function filterPartner() {
        return {
            sourceID: $("#SourcePartnerID").val()
        };
    }
    function setInputFilter(textbox, inputFilter) {
        ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop"].forEach(function (event) {
            textbox.addEventListener(event, function () {
                if (inputFilter(this.value)) {
                    this.oldValue = this.value;
                    this.oldSelectionStart = this.selectionStart;
                    this.oldSelectionEnd = this.selectionEnd;
                } else if (this.hasOwnProperty("oldValue")) {
                    this.value = this.oldValue;
                    this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
                } else {
                    this.value = "";
                }
            });
        });
    }
    setInputFilter(document.getElementById("price"), function (value) {
        return /^\d*$/.test(value);
    });

    function startChange() {
        var startTime = this.value(),
            endPicker = $("#end").data("kendoTimePicker");

        if (startTime) {
            startTime = new Date(startTime);
            endPicker.max(startTime);
            startTime.setMinutes(startTime.getMinutes() + 120);
            endPicker.min(startTime);
            endPicker.value(startTime);
        }
    }

    function filterLocation() {
        return {
            startID: $("#StartLocationID").val()
        };
    }
</script>


