@model TransportPlan
@{
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Kế hoạch chạy xe";
    WebContext db = new WebContext();
    var roles = Roles.GetRolesForUser();
    var userRoleIds = db.WebRoles.Where(x => roles.Contains(x.RoleName)).Select(y => y.RoleId);
    var roleWebModule = db.AccessWebModuleRoles.AsNoTracking().FirstOrDefault(x => userRoleIds.Contains(x.RoleId) && x.WebModule.URL == "/admin/driveplan");

}
<script type="text/javascript">
    var rowselected = [];
    var isCheckedAll = false;


    //function change_handler(e) {
    //    rowselected = [];
    //    var len = this.select().length;
    //    for (i = 0; i < len; i++) {
    //        rowselected.push(this.dataItem(this.select()[i]).ID);
    //    }
    //}
    function binding_handler(e) {
        //rowselected = [];

        //var grid = $("#grid").data("kendoGrid");
        //var dataSource = grid.dataSource;
        //var recordsOnCurrentView = dataSource.view().length;
        //alert(recordsOnCurrentView);
        //var rowItems = $("#grid").data("kendoGrid").dataSource.data();
        //console.log(rowItems);
        //let now = new Date();
        //for (i = 0; i < recordsOnCurrentView; i++) {
        //    if (rowItems[i].PlanDate.getTime() >= now.getTime()) {
        //        row[i].find(".k-grid-Sửa");
        //        alert("đâs");
        //    }
        //}
    }

    $(document).ready(function () {
       @*if (@ViewBag.CheckDriver != 0) {
            $("#time").removeAttr("style").hide();
        }*@

        $("#btnadd").click(function () {
            opendlg("/admin/DrivePlan/add/");
            var windowWidth = $(window).width();
            if (windowWidth<=  1300) {
                $(".k-window").css("margin-top", "12%");
            }
        });

        $(".input-submit").click(function (e) {
            e.preventDefault();
            var dataSource = $("#grid").data("kendoGrid").dataSource.data();
            var models= [];
            if (rowselected.length > 0) {
                for (var i = 0; i < rowselected.length; i++) {
                    for (var j = 0; j < dataSource.length; j++) {
                        var dataItem = dataSource[j];

                        if (dataItem.ID == rowselected[i]) {
                            var model = {};
                            model.PlanDate = dataItem.PlanDate;
                            model.StartTime = dataItem.StartTime;
                            model.EndTime = dataItem.EndTime;
                            model.RouteCode = dataItem.Route.RouteCode;
                            model.DetailCode = dataItem.DetailCode;
                            model.Amount = dataItem.Amount;
                            model.Note = dataItem.Note;
                            model.SourcePartnerName = dataItem.SourcePartner.PartnerName;
                            model.DestinationPartnerName = dataItem.DestinationPartner.PartnerName;
                            model.CarOwerName = dataItem.Vehicle.CarOwerName;
                            model.NumberPlate = dataItem.Vehicle.NumberPlate;
                            model.VehicleWeightName = dataItem.Vehicle.VehicleWeight.WeightName;
                            model.StartLocationnName = dataItem.StartLocation.LocationName;
                            model.EndLocationName = dataItem.EndLocation.LocationName;
                            model.ActualWeightName = dataItem.ActualWeight.WeightName;
                            models.push(model);
                        }
                    }

                }
                var dataSubmit = JSON.stringify(models)
                $("input[name='dataString']").val(dataSubmit);

                setTimeout(function () {
                    $("#general").submit();
                }, 100);
            }
            else {
                alert("Vui lòng chọn để xuất file!");
            }
        });

        $("#upload").click(function (e) {
            opendlg("/admin/DrivePlan/UploadExcel");
        });

        $(".input-submit-delete").click(function (e) {
            e.preventDefault();
            var dataSource = $("#grid").data("kendoGrid").dataSource.data();
            var models = [];
            if (rowselected.length > 0) {
                $("div[class='loader-delete']").show();
                $("#background-black").css("filter", "contrast(60%)");

                for (var i = 0; i < rowselected.length; i++) {
                    for (var j = 0; j < dataSource.length; j++) {
                        var dataItem = dataSource[j];

                        if (dataItem.ID == rowselected[i]) {
                            var model = {};

                            model.ID = dataItem.ID;
                            model.PlanDate = dataItem.PlanDate;
                            model.TrackingCode = dataItem.TrackingCode;
                            model.VehicleID = dataItem.VehicleID;
                            model.RouteID = dataItem.RouteID;
                            model.StartTime = dataItem.StartTime;
                            model.EndTime = dataItem.EndTime;
                            model.SourcePartnerID = dataItem.SourcePartnerID;
                            model.DestinationPartnerID = dataItem.DestinationPartnerID;
                            model.ActualWeightID = dataItem.ActualWeightID;
                            models.push(model);

                        }
                    }
                }
                var date = $("#time").val();
                var dataSubmit = JSON.stringify(models)
                $("input[name='dataStringDelete']").val(dataSubmit);
                $("input[name='dataString']").val(date);

                setTimeout(function () {
                    $("#delete").submit();
                }, 100);
            }
            else {
                alert("Vui lòng chọn để xóa kế hoạch!");
            }
        });
    });

    function delete_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/managepricelist/delete/" + dataItem.ID);
    }

    function edit_handler(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        opendlg("/admin/DrivePlan/edit/" + dataItem.ID);
        var windowWidth = $(window).width();
        var windowWidth = $(window).width();
        if (windowWidth <= 1300) {
            $(".k-window").css("margin-top", "12%");
        }
    }


    function onDataBound(e) {
        $('#grid .k-grid-content').height(screen.height * 0.5);

        $('input[name="checkedNodes"]').each(function () {
            if (rowselected.indexOf(this.value) != -1) {
                $(this).attr('checked', 'checked');
            } else {
                $(this).removeAttr('checked');
            }
        });
        var grid = this;
        let now = new Date().addDays(-10);
        now.setHours(0, 0, 0);

        if (this.dataSource.view().length == 0) {
            //insert empty row
            var colspan = this.thead.find("th").length;
            var emptyRow = "<tr><td colspan='" + colspan + "'></td></tr>";
            this.tbody.html(emptyRow);

            //workarounds for IE lt 9
            this.table.width(1000);
        }

        //Disable button Edit
        //grid.tbody.find("tr[role='row']").each(function () {
        //    var model = grid.dataItem(this);
        //    if (model.PlanDate.getTime() <= now.getTime()) {
        //        $(this).find(".k-grid-Sửa").addClass('disabled');
        //        //$(".disabled").disabled = true;
        //        $(this).find(".k-grid-Sửa").attr('onclick', false);
        //        //$(this).find(".k-grid-Sửa").prop("onclick", null).off("click");
        //        $(this).find(".k-grid-Sửa").removeClass('k-grid-Sửa');
        //        $(this).find(".disabled").addClass('k-grid-Edit');
        //    }
        //});
    };

</script>

<div class="loader-delete" style="display:none"></div>

<div class="flex row-quanlyxe block-div">
    <div class="flex">
        @if (@ViewBag.CheckDriver == 0)
        {
            <div class="manage-car-search row-plan-drive">
                <form action="">
                    <img src="~/Content/themes/admin/img/Vector-kehoach.png" alt="calendar" class="img-box-date-picker img-form-plan-drive img-calander-plan-drive">
                    <input type="text" name="daterange" class="box-date-picker" id="time" value="@ViewBag.Date">
                </form>
            </div>
        }
        else
        {
            <input type="hidden" id="time" value="@ViewBag.Date">
        }

        <div class="manage-car-search row-plan-drive">
            <form action="">
                <img src="~/Content/themes/admin/img/Vector-search1.png" alt="search" class="img-box-search img-form-plan-drive">
                <input id='FieldFilter' type="text" name="" placeholder="Tìm kiếm" class="box-search box-search-quanlyxe">
            </form>
        </div>
    </div>
    <div class="flex block-two-row">
        @using (Html.BeginForm("ExportExcel", "DrivePlan", FormMethod.Post, new { @id = "general", enctype = "multipart/form-data", @class = "form-horizontal fix" }))
        {
            @Html.HiddenFor(m => m.dataString)
            <div class="btn-download btn-plan-drive input-submit">
                <img src="~/Content/themes/admin/img/Vector-download.png" alt="text-14-700">
                <input id="exportData" type="submit" class="text-14-500 padding-text-plan-drive" value="Tải về">
            </div>
        }

        @if (roleWebModule != null && roleWebModule.Add.HasValue && roleWebModule.Add.Value)
        {

            using (Html.BeginForm("Deletes", "DrivePlan", FormMethod.Post, new { @id = "delete", enctype = "multipart/form-data", @class = "form-horizontal fix" }))
            {
                @Html.HiddenFor(m => m.dataStringDelete)
                @Html.HiddenFor(m => m.dataString)

                <div class="btn-download btn-plan-drive input-submit-delete">
                    <img src="~/Images/icon-delete.png" alt="text-14-700">
                    <input type="submit" class="text-14-500 padding-text-plan-drive" value="Xóa">
                </div>
            }

            <div class="btn-download btn-plan-drive" id="upload">
                <img src="~/Content/themes/admin/img/Vector-upload.png" alt="text-14-700">
                <p class="text-14-500 padding-text-plan-drive">Upload</p>
            </div>
            <div class="btn-download btn-plan-drive" id="btnadd">
                <img src="~/Content/themes/admin/img/Vector-add-white.png" alt="text-14-700">
                <p class="text-14-500 padding-text-plan-drive">Thêm</p>
            </div>}
    </div>
</div>


@if (roleWebModule != null && roleWebModule.View.HasValue && roleWebModule.View.Value)
{
    <div class="row-fluid">
        <div class="span12">
            <div class="box">
                <div class="box-content nopadding">
                    @(Html.Kendo().Grid<TransportPlanViewModel>()
                        .Name("grid")
                        //.HtmlAttributes(new { style = "width: 1500px" })

                        .Columns(columns =>
                        {
                        columns.Command(command =>
                        {
                            if (roleWebModule != null && roleWebModule.Edit.HasValue && roleWebModule.Edit.Value)
                            {
                                //command.Custom("Module").Click("modules_handler");
                                //command.Custom("Site").Click("sites_handler");
                                command.Custom(Resources.Common.Edit).Click("edit_handler").HtmlAttributes(new { title = "Sửa" }); ;
                                //command.Custom(Resources.Common.SetPassword).Click("changepassword_handler");
                                //command.Custom(Resources.Common.Delete).Click("delete_handler");
                            }
                        }).HtmlAttributes(new { style = "text-align:center;" }).Width(75).HeaderTemplate("<image src='/Content/themes/admin/img/menu-edit.png'>");
                        columns.Bound("").ClientTemplate("<input name='checkedNodes' type='checkbox' class='k-checkbox' value='#=ID#' onclick='childNodeClick(this)'/>")
                             .HtmlAttributes(new { style = "text-align:center;" })
                             .Filterable(false)
                             .HeaderTemplate("<input type='checkbox' class='checked_all' onclick='checkAll(event)' id='chkAll'/>").Width(70);

                        columns.Bound(p => p.ID).Hidden();
                        columns.Bound(p => p.TrackingCode).Hidden();
                        columns.Bound(p => p.VehicleID).Hidden();
                        columns.Bound(p => p.RouteID).Hidden();
                        columns.Bound(p => p.StartTime).Hidden();
                        columns.Bound(p => p.EndTime).Hidden();
                        columns.Bound(p => p.SourcePartnerID).Hidden();
                        columns.Bound(p => p.DestinationPartnerID).Hidden();
                        columns.Bound(p => p.ActualWeightID).Hidden();

                            columns.Bound(p => p.PlanDate).Title(WebModels.WebResources.PlanDate).Filterable(filterable =>filterable.UI(@<text>function (element) {
                                                element.kendoDatePicker({
                                                    culture: 'vi-VN'
                                                });
                                            }</text>)).HtmlAttributes(new { style = "text-align:center;" }).Format("{0:dd-MM-yyyy}").Width(150);
                            columns.Bound(p => p.StartDateTime).Filterable(filterable =>filterable.UI(@<text>function (element) {
                                                element.kendoTimePicker({
                                                    culture: 'vi-VN'
                                                });
                                            }</text>)).Title(WebModels.WebResources.StartTime).HtmlAttributes(new { style = "text-align:center;" }).Format("{0:HH:mm}").Width(150);
                            columns.Bound(p => p.EndDateTime).Filterable(filterable =>filterable.UI(@<text>function (element) {
                                                element.kendoTimePicker({
                                                    culture: 'vi-VN'
                                                });
                                            }</text>)).Title(WebModels.WebResources.EndTime).HtmlAttributes(new { style = "text-align:center;" }).Width(150).Format("{0:HH:mm}").Width(150);
                            if(ViewBag.CheckDriver == 0)
                            {
                                columns.Bound(p => p.Route.RouteCode).Title(WebModels.WebResources.RouteCode).HtmlAttributes(new { style = "text-align:center;" }).Width(165);
                            }
                            columns.Bound(p => p.StartLocation.LocationName).Title(WebModels.WebResources.StartLocation).Width(170);
                            columns.Bound(p => p.EndLocation.LocationName).Title(WebModels.WebResources.EndLocation).Width(170);
                            columns.Bound(p => p.Vehicle.NumberPlate).Title(WebModels.WebResources.NumberPlate).HtmlAttributes(new { style = "text-align:center;" }).Width(130);
                            if (ViewBag.CheckDriver == 0)
                            {
                                columns.Bound(p => p.Vehicle.VehicleWeight.WeightName).Title(WebModels.WebResources.VehicleWeight).HtmlAttributes(new { style = "text-align:center;" }).Width(160);
                                columns.Bound(p => p.ActualWeight.WeightName).Title(WebModels.WebResources.ActualWeight).HtmlAttributes(new { style = "text-align:center;" }).Width(160);
                                columns.Bound(p => p.TripBack).Title(WebModels.WebResources.TripBack).HtmlAttributes(new { style = "text-align:center; color:red; font-weight:500;" }).Width(150);
                                columns.Bound(p => p.SourcePartner.PartnerName).Title(WebModels.WebResources.SourcePartner).HtmlAttributes(new { style = "text-align:center;" }).Width(150);
                                columns.Bound(p => p.DestinationPartner.PartnerName).Title(WebModels.WebResources.DestinationPartner).HtmlAttributes(new { style = "text-align:center;" }).Width(170);
                                columns.Bound(p => p.DetailCode).Title(WebModels.WebResources.DetailCode).HtmlAttributes(new { style = "text-align:center;" }).Width(165);
                                columns.Bound(p => p.Amount).Title(WebModels.WebResources.Amount).HtmlAttributes(new { style = "text-align:center;" }).Width(165);
                                columns.Bound(p => p.Note).Title(WebModels.WebResources.Note).Width(150);
                            }})
                .Pageable()
                .Filterable()
                .Sortable()
                .Scrollable(s => s.Height(550))
                .Reorderable(reorder => reorder.Columns(true))
                .Selectable(select => select.Mode(GridSelectionMode.Single))
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Model(model => model.Id(p => p.ID))
                    .PageSize(20)
                 .Read(read => read.Action("TransportPlanLists_Read", "DrivePlan").Data("getTime"))
                     .ServerOperation(false)
                 )
                     .Events(events => events.DataBinding("binding_handler").DataBound("onDataBound")
           )

                        )
                </div>
            </div>
        </div>
    </div>
}
<script type="text/javascript" src="~/Content/themes/admin/js/tableHeadFixer.js"></script>

<script>

    function deletes_success() {
        $("div[class='loader-delete']").hide();
        $("#background-black").css("filter", "contrast(100%)");
        window.parent.show_stack_bottom_right('success', 'Xóa kế hoạch', 'Xóa thành công.');
    }

    function deletes_unsuccess() {
        $("div[class='loader-delete']").hide();
        alert("Đã xuất hiện lỗi trong quá trình xóa kế hoạch!");
        $("#background-black").css("filter", "contrast(100%)");
        window.parent.show_stack_bottom_right('error', 'Xóa kế hoạch', 'Xóa không thành công.');
    }

    $(grid.element).kendoTooltip({
        filter: ".k-grid-Edit",
        width: 120,
        position: "top",
        content: 'ahihihihi'
    });

    function getDataFilter() {
        var dataSource = $("#grid").data("kendoGrid").dataSource;
        var filters = dataSource.filter();
        var allData = dataSource.data();
        var query = new kendo.data.Query(allData);
        var result = query.filter(filters).data;
        return result;
    }
    function getCheckAll() {
        var dataFilterID = [];
        var dataFilter = getDataFilter();
        var check;
        for (var i = 0; i < dataFilter.length; i++) {
            dataFilterID.push(String(dataFilter[i].ID));
        }
        for (var i = 0; i < dataFilterID.length; i++) {
            var index = rowselected.indexOf(dataFilterID[i]);
            if (index != -1) {
                check = true;
            }
            else {
                check = false;
                break;
            }
        }
        return check;
    }

    function childNodeClick(element) {
        var dataID = getCheckAll();
        var id = element.value;
        if (rowselected.indexOf(id) !== -1) {
            rowselected.splice(rowselected.indexOf(id), 1);
        } else {
            rowselected.push(id);
        }
        isCheckedAll = getCheckAll();
        $('#chkAll').prop('checked', isCheckedAll);
    }

    $(function () {
        $(".k-filter").click(function () {
            setTimeout(function () {
                $(".k-filter-menu .k-button").click(function () {
                    setTimeout(function () {
                        rowselected = [];
                        isCheckedAll = getCheckAll();
                        $('#chkAll').prop('checked', isCheckedAll);
                        $('input[name="checkedNodes"]').each(function () {
                            if (rowselected.indexOf(this.value) != -1) {
                                $(this).attr('checked', 'checked');
                            } else {
                                $(this).removeAttr('checked');
                            }
                        });
                    }, 10)
                })
            }, 100);
        });
    });

    function checkAll(e) {
        var rowItems = getDataFilter();
        isCheckedAll = $(e.target).prop('checked');
        if (isCheckedAll) {
            for (var i = 0; i < rowItems.length; i++) {
                var index = rowselected.indexOf(String(rowItems[i].ID));
                if (index == -1) {
                    rowselected.push(String(rowItems[i].ID));
                }
            }
        }
        else if (!isCheckedAll) {
            var dataFilterID = [];
            var dataFilter = getDataFilter();
            for (var i = 0; i < dataFilter.length; i++) {
                dataFilterID.push(String(dataFilter[i].ID));
            }
            for (var i = 0; i < dataFilterID.length; i++) {
                var index = rowselected.indexOf(dataFilterID[i]);
                if (index != -1) {
                    rowselected.splice(index, 1);
                }
            }
        }

        $('input[name="checkedNodes"]').each(function () {
            $(this).prop('checked', isCheckedAll);
        });
        console.log(rowselected);

    }


    function getTime(e) {
        return {
            datetime: $("#time").val()
        };
    }

    $('input[name="daterange"]').on('apply.daterangepicker', function (ev, picker) {
        $("#grid").data("kendoGrid").dataSource.read();
    });

    $(document).ready(function () {

        $("#FieldFilter").keyup(function () {

            var value = $("#FieldFilter").val();

            $("#grid").data("kendoGrid").dataSource.filter({
                logic: "or",
                filters: [

                    {
                        field: "TrackingCode",
                        operator: "contains",
                        value: value
                    },
                    {
                        field: "Route.StartLocation.LocationName",
                        operator: "contains",
                        value: value
                    },
                    {
                        field: "Vehicle.NumberPlate",
                        operator: "contains",
                        value: value
                    },
                    {
                        field: "Route.EndLocation.LocationName",
                        operator: "contains",
                        value: value
                    },
                    {
                        field: "Vehicle.VehicleWeight.WeightName",
                        operator: "contains",
                        value: value
                    },
                    {
                        field: "SourcePartner.PartnerName",
                        operator: "contains",
                        value: value
                    },
                    {
                        field: "DestinationPartner.PartnerName",
                        operator: "contains",
                        value: value
                    },
                    {
                        field: "Note",
                        operator: "contains",
                        value: value
                    }
                ]
            });
        });
    });

</script>

