@model TransportActual
@{
    Layout = "~/Areas/Admin/Views/Shared/_LayoutEmpty.cshtml";
}
@using (Html.BeginForm("Add", "Enumeration", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-change-car" }))
{
    <div>

        <div class="flex">
            <div class="width-text-modal">
                @Html.LabelFor(m => m.ActualDate, new { @class = "control-label" })
            </div>
            <div class="controls">
                @(Html.Kendo().DatePicker()
                    .Name("date") // The name of the DatePicker is mandatory. It specifies the "id" attribute of the widget.
                    .Min(new DateTime(1900, 1, 1)) // Sets the min date of the DatePicker.
                    .Max(new DateTime(2099, 12, 31)) // Sets the max date of the DatePicker.
                    .Value(DateTime.Today) // Sets the value of the DatePicker.
                    .HtmlAttributes(new { type = "text" })
                    .Culture("vi-VN")

    )
                <br />
                @Html.ValidationMessageFor(m => m.ActualDate)
                @Html.ValidationMessage("CustomErrorDate", new { @class = "field-validation-timer" })

            </div>
        </div>
        <div class="flex">
            <div class="width-text-modal">
                @Html.Label(WebModels.WebResources.RouteCode, new { @class = "control-label" })
                <span class="form-obligatory">*</span>
            </div>
            <div class="controls">
                @(Html.Kendo().ComboBox()
          .Name("RouteID")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Chọn mã lộ trình...")
          .DataTextField("RouteName")
          .DataValueField("RouteID")
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("Get_RouteCodes", "ManagePriceList");

              })
               .ServerFiltering(false);

          })
    )
                @Html.ValidationMessageFor(m => m.RouteID)
            </div>
        </div>

        <div class="flex">
            <div class="width-text-modal">
                @Html.Label(WebModels.WebResources.ActualWeight, new { @class = "control-label" })
            </div>
            <div class="controls">
                @(Html.Kendo().ComboBox()
          .Name("ActualWeightID")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Chọn tải trọng chạy...")
         .DataTextField("WeightName")
         .DataValueField("ID")
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("GetWeights", "ManageCar");

              })
               .ServerFiltering(false);

          })
    )
                @Html.ValidationMessageFor(m => m.ActualWeightID)

            </div>
        </div>
        <div class="flex">
            <div class="width-text-modal">
                @Html.Label("Biển số xe", new { @class = "control-label" })
                <span class="form-obligatory">*</span>
            </div>
            <div class="controls">
                @(Html.Kendo().ComboBox()
          .Name("VehicleID")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Chọn xe...")
          .DataTextField("NumberPlate")
          .DataValueField("ID")
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("Get_Vehicles", "DrivePlan");

              })
               .ServerFiltering(false);
          })
    )
                @Html.ValidationMessageFor(m => m.VehicleID)

            </div>
        </div>
        <div class="flex">
            <div class="width-text-modal">
                @Html.Label("Nhà thầu", new { @class = "control-label" })
                <span class="form-obligatory">*</span>
            </div>
            <div class="controls">
                @(Html.Kendo().ComboBox()
          .Name("SourcePartnerID")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Chọn nhà thầu...")
          .DataTextField("PartnerName")
          .DataValueField("ID")
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("Get_SourcePartners", "ManagePriceList");

              })
               .ServerFiltering(false);
          })
    )
                @Html.ValidationMessageFor(m => m.SourcePartnerID)

            </div>

        </div>
        <div class="flex">
            <div class="width-text-modal">
                @Html.Label("Đơn vị thuê", new { @class = "control-label" })
                <span class="form-obligatory">*</span>

            </div>
            <div class="controls">
                @(Html.Kendo().ComboBox()
          .Name("DestinationPartnerID")
          .HtmlAttributes(new { style = "width:100%" })
          .Placeholder("Chọn đơn vị vận chuyển...")
          .DataTextField("PartnerName")
          .DataValueField("ID")
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  read.Action("Get_DestinationPartners", "ManagePriceList").Data("filterPartner");

              })
               .ServerFiltering(true);
          })
          .AutoBind(false)
          .Enable(false)
          .CascadeFrom("SourcePartnerID")

    )
                @Html.ValidationMessageFor(m => m.DestinationPartnerID)

            </div>
        </div>
        <div class="flex">
            <div class="width-text-modal">
                @Html.Label(WebModels.WebResources.TripCount, new { @class = "control-label" })
                <span class="form-obligatory">*</span>
            </div>
            <div class="controls">
                @Html.TextBoxFor(m => m.TripCountViewModel, new { name = "BKS", @class = "input-block-level", type = "text" })
                @Html.ValidationMessageFor(m => m.TripCountViewModel)
            </div>
        </div>

        <div class="flex">
            <div class="width-text-modal">
                @Html.Label(WebModels.AccountResources.Note, new { @class = "control-label" })
            </div>
            <div class="controls">
                @Html.TextAreaFor(m => m.Note, new { type = "text", name = "BKS", @class = "input-block-level text-area" })
                @Html.ValidationMessageFor(m => m.Note)
                @Html.ValidationSummary(true)
            </div>
        </div>
        <div class="row top-rows">
            <div class="col-lg-4 col-md-4 col-sm-4 col-4" onclick="exitWindow()">
                <div class="exit-car-form">Hủy</div>
            </div>
            <div class="col-lg-8 col-md-8 col-sm-8 col-8">
                <div>
                    <input type="submit" class="btn text-14-700 save-change-car-form" value="Lưu">
                </div>
            </div>
        </div>
    </div>
    @Html.AntiForgeryToken()
}

<script type="text/javascript">
    //if (screen.width > 1500) {
    //    top.winsetup("Thêm", 1440 * 0.4, screen.height * 0.47, true);
    //}
    //else if (screen.width < 450) {
    //    top.winsetup("Thêm", screen.width * 0.8, screen.height * 0.575, true);
    //}
    //else if (screen.width < 1025) {
    //    top.winsetup("Thêm", screen.width * 0.6, screen.height * 0.4, true);
    //}
    //else {
    //    top.winsetup("Thêm", screen.width * 0.4, screen.height * 0.62, true);
    //}

    top.winsetup("Thêm", 600, 520, true);
    if (screen.width < 576) {
        top.winsetup("Thêm", screen.width * 0.8, screen.height * 0.52, true);
    }

    function create_success() {
        top.winclose();
        top.$("#grid").data("kendoGrid").dataSource.read();
        top.$("#gridAT").data("kendoGrid").dataSource.read();
        top.$("#gridHPC").data("kendoGrid").dataSource.read();
    }
    function exitWindow() {
        top.$("#window").data("kendoWindow").close();
        window.parent.show_stack_bottom_right('success', 'Thêm bảng kê', 'Thêm thành công.');

    }
    function filterPartner() {
        return {
            sourceID: $("#SourcePartnerID").val()
        };
    }
    function setInputFilter(textbox, inputFilter) {
        ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop"].forEach(function (event) {
            textbox.addEventListener(event, function () {
                if (inputFilter(this.value)) {
                    this.oldValue = this.value;
                    this.oldSelectionStart = this.selectionStart;
                    this.oldSelectionEnd = this.selectionEnd;
                } else if (this.hasOwnProperty("oldValue")) {
                    this.value = this.oldValue;
                    this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
                } else {
                    this.value = "";
                }
            });
        });
    }
    setInputFilter(document.getElementById("price"), function (value) {
        return /^\d*$/.test(value);
    });
</script>


